from imporst import *
from creations import *
from keys_and_tokens import *





set_goal_schema = {
    'username': {'type': 'string', 'required': True, 'empty': False},
    'goal_value': {'type': 'number', 'required': True},
    'goal_month': {'type': 'integer', 'required': True, 'min': 1, 'max': 12}
}

@app.route('/set_goal', methods=['POST'])
def set_goal():

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –∏ —Ä–æ–ª–∏
    try:
        token = request.headers.get('Authorization').split(' ')[-1]
        payload = verify_jwt(token)
        if not payload:
            return jsonify({"success": False, "message": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"}), 401

        role = payload['role']

        if role.lower() != 'admin':
            return jsonify({
                "success": False,
                "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–ª–∏."
            }), 403

    except Exception:
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞"}), 401

    # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = request.get_json()
    v = Validator(set_goal_schema)

    if not v.validate(data):
        response_data = {
            "success": False,
            "data": {
                "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                "details": v.errors
            }
        }
        return jsonify(response_data), 400

    # üíæ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
    try:
        username = data['username']
        goal_value = data['goal_value']
        goal_month = data['goal_month']

        goal_year = datetime.now().year
        goal_date = f"{goal_month:02d}.{goal_year}"

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            'UPDATE goals SET Profit = ? WHERE Data = ? AND Name = ?',
            (goal_value, goal_date, username)
        )

        if cursor.rowcount == 0:
            cursor.execute(
                'INSERT INTO goals (Data, Name, Profit) VALUES (?, ?, ?)',
                (goal_date, username, goal_value)
            )

        conn.commit()
        return jsonify({
            "success": True,
            "message": f"–¶–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –Ω–∞ {goal_date} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        }), 200

    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏: {str(e)}"
        }), 500

    finally:
        if 'conn' in locals():
            conn.close()






@app.route('/get_goals', methods=['GET'])
def get_goals_data():
    try:

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM goals ORDER BY Data DESC')
        goals_data = cursor.fetchall()
        conn.close()

        goals_list = [
            {'date': goal['Data'], 'username': goal['Name'], 'goal_value': goal['Profit']}
            for goal in goals_data
        ]

        return jsonify({
            "success": True,
            "message": "–î–∞–Ω–Ω—ã–µ –ø–æ —Ü–µ–ª—è–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
            "goals": goals_list
        }), 200

    except Exception as e:
        return jsonify({
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        }), 500





def transfer_previous_month_data():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    current_date = datetime.now()
    previous_month = current_date - timedelta(days=current_date.day)
    previous_month_str = previous_month.strftime('%m.%Y')  # –§–æ—Ä–º–∞—Ç: MM.YYYY

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    conn = get_db_connection()
    cursor = conn.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    cursor.execute('SELECT * FROM goals WHERE Data = ?', (previous_month_str,))
    previous_month_data = cursor.fetchall()

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month_str = current_date.strftime('%m.%Y')  # –§–æ—Ä–º–∞—Ç: MM.YYYY

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    cursor.execute('SELECT * FROM goals WHERE Data = ?', (current_month_str,))
    existing_data = cursor.fetchall()

    if not existing_data:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º
        for row in previous_month_data:
            cursor.execute('''
                INSERT INTO goals (Data, Name, Profit)
                VALUES (?, ?, ?)
            ''', (current_month_str, row['Name'], row['Profit']))
        print(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {current_month_str} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã.")
    else:
        print(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {current_month_str} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü–µ—Ä–µ–Ω–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()
    conn.close()





